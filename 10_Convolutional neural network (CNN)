JUPITER NOTEBOOK

pip install tensorflow matplotlib

Step 2:Load the Fashion MNIST Dataset Fashion MNIST is built into TensorFlow.

Step 3: Preprocess the Data
Normalize pixel values to [0, 1]

Reshape input data for CNNs (add channel dimension)

Step 4: Build the CNN Model
Use Conv2D → MaxPooling → Dense

Step 5: Train and Evaluate the Model
Step 6: Visualize Accuracy & Loss
Step 7: Code

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Step 1: Load dataset
fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

# Step 2: Preprocess the data
X_train = X_train / 255.0
X_test = X_test / 255.0

# Add channel dimension (batch, height, width, channels)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# Step 3: Define CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # 10 categories
])

# Step 4: Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Step 5: Train the model
history = model.fit(X_train, y_train, epochs=5, validation_split=0.2)

# Step 6: Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_acc:.4f}")

# Step 7: Plot training vs validation accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()


Summary:
Uses a simple yet powerful CNN architecture
Handles image classification for fashion items
Can be extended to plant disease datasets by changing the dataset and modifying input dimensions



